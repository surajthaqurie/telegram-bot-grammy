"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.adapters = exports.SECRET_HEADER = void 0;
// deno-lint-ignore-file no-explicit-any
const frameworks_web_js_1 = require("./frameworks.web.js");
exports.SECRET_HEADER = "X-Telegram-Bot-Api-Secret-Token";
/** express web framework */
const express = (req, res) => ({
    update: Promise.resolve(req.body),
    header: req.header(exports.SECRET_HEADER),
    end: () => res.end(),
    respond: (json) => {
        res.set("Content-Type", "application/json");
        res.send(json);
    },
    unauthorized: () => {
        res.send(401, "secret token is wrong");
    },
});
/** koa web framework */
const koa = (ctx) => ({
    update: Promise.resolve(ctx.request.body),
    header: ctx.get(exports.SECRET_HEADER),
    end: () => {
        ctx.body = "";
    },
    respond: (json) => {
        ctx.set("Content-Type", "application/json");
        ctx.response.body = json;
    },
    unauthorized: () => {
        ctx.status = 401;
    },
});
/** fastify web framework */
const fastify = (req, reply) => ({
    update: Promise.resolve(req.body),
    header: req.headers[exports.SECRET_HEADER.toLowerCase()],
    end: () => reply.status(200).send(),
    respond: (json) => reply.send(json),
    unauthorized: () => reply.code(401).send("secret token is wrong"),
});
/** std/http web server */
const stdHttp = (req) => {
    let resolveResponse;
    return {
        update: req.json(),
        header: req.headers.get(exports.SECRET_HEADER) || undefined,
        end: () => {
            if (resolveResponse) {
                resolveResponse(new Response(null, { status: 200 }));
            }
        },
        respond: (json) => {
            if (resolveResponse) {
                const res = new Response(json, {
                    status: 200,
                    headers: { "Content-Type": "application/json" },
                });
                resolveResponse(res);
            }
        },
        unauthorized: () => {
            if (resolveResponse) {
                const res = new Response('"unauthorized"', {
                    status: 401,
                    statusText: "secret token is wrong",
                });
                resolveResponse(res);
            }
        },
        handlerReturn: new Promise((resolve) => {
            resolveResponse = resolve;
        }),
    };
};
/** oak web framework */
const oak = (ctx) => ({
    update: ctx.request.body({ type: "json" }).value,
    header: ctx.request.headers.get(exports.SECRET_HEADER) || undefined,
    end: () => (ctx.response.status = 200),
    respond: (json) => {
        ctx.response.type = "json";
        ctx.response.body = json;
    },
    unauthorized: () => {
        ctx.response.status = 401;
    },
});
exports.adapters = {
    express,
    koa,
    fastify,
    "std/http": stdHttp,
    oak,
    hono: frameworks_web_js_1.adapters.hono,
};
